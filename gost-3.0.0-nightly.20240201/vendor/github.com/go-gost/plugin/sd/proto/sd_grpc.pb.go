// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: sd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDClient is the client API for SD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterReply, error)
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error)
	Get(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error)
}

type sDClient struct {
	cc grpc.ClientConnInterface
}

func NewSDClient(cc grpc.ClientConnInterface) SDClient {
	return &sDClient{cc}
}

func (c *sDClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/proto.SD/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDClient) Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterReply, error) {
	out := new(DeregisterReply)
	err := c.cc.Invoke(ctx, "/proto.SD/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error) {
	out := new(RenewReply)
	err := c.cc.Invoke(ctx, "/proto.SD/Renew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDClient) Get(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := c.cc.Invoke(ctx, "/proto.SD/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDServer is the server API for SD service.
// All implementations must embed UnimplementedSDServer
// for forward compatibility
type SDServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Deregister(context.Context, *DeregisterRequest) (*DeregisterReply, error)
	Renew(context.Context, *RenewRequest) (*RenewReply, error)
	Get(context.Context, *GetServiceRequest) (*GetServiceReply, error)
	mustEmbedUnimplementedSDServer()
}

// UnimplementedSDServer must be embedded to have forward compatible implementations.
type UnimplementedSDServer struct {
}

func (UnimplementedSDServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSDServer) Deregister(context.Context, *DeregisterRequest) (*DeregisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedSDServer) Renew(context.Context, *RenewRequest) (*RenewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (UnimplementedSDServer) Get(context.Context, *GetServiceRequest) (*GetServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSDServer) mustEmbedUnimplementedSDServer() {}

// UnsafeSDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDServer will
// result in compilation errors.
type UnsafeSDServer interface {
	mustEmbedUnimplementedSDServer()
}

func RegisterSDServer(s grpc.ServiceRegistrar, srv SDServer) {
	s.RegisterService(&SD_ServiceDesc, srv)
}

func _SD_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SD/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SD_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SD/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDServer).Deregister(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SD_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SD/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SD_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SD/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDServer).Get(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SD_ServiceDesc is the grpc.ServiceDesc for SD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SD",
	HandlerType: (*SDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SD_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _SD_Deregister_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _SD_Renew_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SD_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sd.proto",
}
